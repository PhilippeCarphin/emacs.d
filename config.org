* Top
** MISC
*** Scrolling behavior
=scroll-margin= makes the window start scrolling when the curson gets N lines
from the top or bottom and =scroll-step= makes the window move one line at a time.
#+BEGIN_SRC emacs-lisp
(setq scroll-step 1)
(setq-default scroll-margin 10)
#+end_src

*** Wrapping

Automattically hard-wrap text on 80 chars.
#+begin_src emacs-lisp
(setq-default auto-fill-function 'do-auto-fill)
(setq-default fill-column 80)
#+end_src

*** Startup color theme
#+being_src
(load-theme 'tango-dark)
#+end_src

** Evil mode
*** Install and activate
#+begin_src emacs-lisp
(use-package evil
  :ensure t)
(evil-mode 1)
#+end_src
*** Vim like window split keys
#+begin_src emacs-lisp
(define-key evil-insert-state-map (kbd "C-w") evil-window-map)
(define-key evil-insert-state-map (kbd "C-w /") 'split-window-right)
(define-key evil-insert-state-map (kbd "C-w -") 'split-window-below)
#+END_SRC

** Helper frameworks
*** Helm

#+begin_src emacs-lisp
(use-package helm
  :ensure t
  :preface (require 'helm-config)
  :config (helm-mode)
  :bind (("M-x" . helm-M-x)
         ("C-x C-f" . helm-find-files)
         ("C-x f" . helm-recentf)
         ("C-x b" . helm-buffers-list)))
#+end_src

*** Which-key
    
Popup describing possible key bingings at each step of a key sequence.

#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :delight
  :init
  (setq which-key-separator " ")
  (setq which-key-prefix-prefix "+")
  :config
  (which-key-mode))
#+end_src

** Org configuration
*** Looks

**** Bullets

     All this does is turn all the stars except the last the same color as the
     background and make the last one show as a nice unicode bullet.
     
     I think this is essencial to being able to navigate an arbitrarily deep
     tree easily.

#+begin_src emacs-lisp
(use-package org-bullets
  :ensure t
  :hook (org-mode . org-bullets-mode))
#+end_src

*** Exporting
    
I use Twitter Bootstrap to export to emails.  I use the RST to write sphinx-doc
documentation.

Reveal.js is for presentations.

And the =htmlize= package makes code listings appear with color in all the
export formats.
    
#+begin_src emacs-lisp
(use-package ox-rst
  :ensure t)
(use-package ox-twbs
  :ensure t)
(use-package ox-reveal
  :ensure t
  :config (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js"))
(use-package htmlize
  :ensure t)
#+end_src

*** Organization

**** Todo keywords for GTD
     
The first set of keywords is a generic set of keywords that I can give TODO
keywords to items without having them be part of my GTD.

The GTD-* keywords map to the various things that what David Allen calls "stuff"
can be.

#+begin_src emacs-lisp
(setq org-todo-keywords '((sequence "TODO" "WAITING" "VERIFY" "|" "DONE")
			  (sequence "GTD-IN(i)" "GTD-CLARIFY(c)" "GTD-PROJECT(p)"
				    "GTD-SOMEDAY-MAYBE(s)" "GTD-ACTION(a)" "GTD-NEXT-ACTION(n)"
				    "GTD-WAITING(w)" "|" "GTD-REFERENCE(r)" "GTD-DELEGATED(g)" "GTD-DONE(d)")))
#+end_src

**** Agenda files
     
To begin using org-agenda, all we need to do is to give it a directory that
contains orgmode files.

#+begin_src emacs-lisp
(setq org-agenda-files '("~/Dropbox/Notes/gtd/"))
#+end_src

     
**** Agenda Key
I mapped a key because I like to pop in and out of it.
#+begin_src emacs-lisp
(global-set-key (kbd "C-c a") 'org-agenda)
#+end_src

**** Date interval for agenda view
      
The default is kind of annoying.  It shows a week starting on a Sunday but what
is annoying about that is that on Sunday, the agenda won't show what you have
tomorrow!

The way this is set, it will show 10 days starting 3 days in the past.

#+begin_src emacs-lisp
(setq org-agenda-span 10
      org-agenda-start-on-weekday nil
      org-agenda-start-day "-3d")
#+end_src

*** Babel
**** Babel Intro
Babel allows running of code blocks.  It is what enables this config to be in
orgmode format.

The ability to evaluate code in orgmode source blocks is built in with emacs but
must be activated to be used:

https://orgmode.org/worg/org-contrib/babel/languages/index.html#configure

**** Babel config
We simply add languages that we want to become available.  There are many more
but some of them require installing extra packages.

#+begin_src emacs-lisp
(org-babel-do-load-languages 'org-babel-load-languages
    '((shell . t)
      (python . t)))
#+end_src

** Magit
   
The most amazing vim plugin in existence.

#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src

