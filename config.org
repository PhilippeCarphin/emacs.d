#+OPTIONS: toc:1
#+REVEAL_MIN_SCALE: 0.1
#+REVEAL_HLEVEL: 2
#+STARTUP: inlineimages
#+ATTR_ORG: :width 500px

* Top

** Intro
#+REVEAL: split
An elementary that can be taken as is to start from oriented towards leveragin
the full power of orgmode immediately.
- Sane miscellaneous defaults
- A built in color theme that looks good in orgmode exports
- Evil mode if you know vim but not emacs
- Basic helper frameworks that are defacto standard
- Elementary org configuration allowing immediate use of built in package babel.

** Scrolling behavior

=scroll-margin= makes the window start scrolling when the curson gets N lines
from the top or bottom and =scroll-step= makes the window move one line at a time.

#+BEGIN_SRC emacs-lisp
(setq scroll-step 1)
(setq-default scroll-margin 10)
#+end_src

** Wrapping

Automattically hard-wrap text on 80 chars.

#+begin_src emacs-lisp
(setq-default auto-fill-function 'do-auto-fill)
(setq-default fill-column 80)
#+end_src

** Startup color theme

Dark theme that exports well

#+begin_src emacs-lisp
(load-theme 'misterioso)
#+end_src

**** Explanation                                                   :noexport_reveal:

    The default emacs theme looks good when exporting to HTML.  But because of
    =htmlize=, with dark themes, the code can come out looking bad in exports
    when text colors meant for dark backgrounds appear over the light background
    of the HTML.

    One of the built-in color themes where code looks good on light backgrounds
    and which is easy on the eyes is =misterioso=

    Although the default emacs theme exports well, it's not easy on the eyes in
    emacs itself.  A light theme that exports well and looks good in emacs is
    =leuven=.

** Evil mode
*** Install and activate

#+begin_src emacs-lisp
(use-package evil
  :ensure t
  :config (evil-mode))
#+end_src

*** Vim like window split keys

#+begin_src emacs-lisp
(define-key evil-insert-state-map (kbd "C-w") evil-window-map)
(define-key evil-insert-state-map (kbd "C-w /") 'split-window-right)
(define-key evil-insert-state-map (kbd "C-w -") 'split-window-below)
#+END_SRC

*** Map undo keys to undo-tree function

#+begin_src emacs-lisp
(define-key evil-normal-state-map (kbd "C-r") 'undo-tree-redo)
(define-key evil-normal-state-map (kbd "u") 'undo-tree-undo)
#+end_src

** Helper frameworks

*** Undo tree
#+begin_src emacs-lisp
(use-package undo-tree
  :ensure t
  :config (global-undo-tree-mode))
#+END_SRC
*** Helm

Improve searching interface all over emacs.

Calling =helm-mode= remaps lots of emacs functions to their =helm=-ized
equivalents.

We also add a few ourselves.

#+begin_src emacs-lisp
(use-package helm :ensure t
  :preface (require 'helm-config)
  :config (helm-mode)
  :bind (("M-x" . helm-M-x)
	 ("C-x C-f" . helm-find-files)
	 ("C-x f" . helm-recentf)
	 ("C-c g" . helm-grep-do-git-grep)
	 ("C-x b" . helm-buffers-list)))
#+end_src

**** Remapped functions

- =M-x= adds helm when writing function
- Files and buffers
  - =helm-recentf=
  - =helm-find-files=
  - =helm-buffer-list=
- =helm-mode=
  - =describe-function=
  - =describe-symbol=

**** Powerful tools

- =helm-grep-do-git-grep=

*** Which-key

Help discovering available key sequences in all contexts.

Originally developped for spacemacs, now part of the standard emacs packages.

#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :delight
  :init
  (setq which-key-separator " ")
  (setq which-key-prefix-prefix "+")
  (setq which-key-idle-delay 0.01)
  :config
  (which-key-mode))
#+end_src

*** Standard autocomplete

#+begin_src emacs-lisp
(use-package company
  :ensure t
  :config (global-company-mode)
          (setq company-idle-delay 0))
#+end_src
** Org configuration
*** Looks
**** Bullets

Show nice bullets

Essential for easy tree viewing

#+begin_src emacs-lisp
(use-package org-bullets
  :ensure t
  :hook (org-mode . org-bullets-mode))
#+end_src

*** Exporting

- =ox-twbs= to export to beautiful HTML
- =ox-reveal= to export to Reveal.js presentation
- =ox-rst= to generate Restructured Text for sphinx documentation
- =htmlize= for colored code in all export formats

#+begin_src emacs-lisp
(use-package ox-rst :ensure t)
(use-package ox-twbs :ensure t)
(use-package ox-reveal :ensure t
  :config (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js"))
(use-package htmlize :ensure t)
#+end_src

*** Organization

**** Todo keywords for GTD

The first set of keywords is a generic set of keywords that I can give TODO
keywords to items without having them be part of my GTD.

The GTD-* keywords map to the various things that what David Allen calls "stuff"
can be.

#+begin_src emacs-lisp
(setq org-todo-keywords '((sequence "TODO" "WAITING" "VERIFY" "|" "DONE")
			  (sequence "GTD-IN(i)" "GTD-CLARIFY(c)" "GTD-PROJECT(p)"
				    "GTD-SOMEDAY-MAYBE(s)" "GTD-ACTION(a)" "GTD-NEXT-ACTION(n)"
				    "GTD-WAITING(w)" "|" "GTD-REFERENCE(r)" "GTD-DELEGATED(g)" "GTD-DONE(d)")))
#+end_src

**** Agenda files

To begin using org-agenda, all we need to do is to give it a directory that
contains orgmode files.

#+begin_src emacs-lisp
(setq org-agenda-files '("~/Dropbox/Notes/gtd/"))
#+end_src


**** Agenda Key
I mapped a key because I like to pop in and out of it.
#+begin_src emacs-lisp
(global-set-key (kbd "C-c a") 'org-agenda)
#+end_src

**** Date interval for agenda view

The default is kind of annoying.  It shows a week starting on a Sunday but what
is annoying about that is that on Sunday, the agenda won't show what you have
tomorrow!

The way this is set, it will show 10 days starting 3 days in the past.

#+begin_src emacs-lisp
(setq org-agenda-span 10
      org-agenda-start-on-weekday nil
      org-agenda-start-day "-3d")
#+end_src

*** Babel
**** Babel Intro
Babel allows running of code blocks.  It is what enables this config to be in
orgmode format.

The ability to evaluate code in orgmode source blocks is built in with emacs but
must be activated to be used:

https://orgmode.org/worg/org-contrib/babel/languages/index.html#configure

**** Babel config
We simply add languages that we want to become available.  There are many more
but some of them require installing extra packages.

#+begin_src emacs-lisp
(org-babel-do-load-languages 'org-babel-load-languages
    '((shell . t)
      (python . t)))
#+end_src

**** Disable prompt
As a security precaution this is off by default.

#+begin_src emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+end_src
** Magit

The most amazing vim plugin in existence.

#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src
