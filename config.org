
** MISC

*** Startup color theme
#+begin_src emacs-lisp
(load-theme 'deeper-blue)
#+end_src
*** Quick reload function
#+begin_src emacs-lisp
(defun reload-user-init-file()
  (interactive)
  (load-file user-init-file))
#+end_src

*** Recent files
#+begin_src emacs-lisp
(recentf-mode 1)
(setq-default recent-save-file "~/.emacs.d/recentf")  
#+end_src
*** Scrolling behavior
=scroll-margin= makes the window start scrolling when the curson gets N lines
from the top or bottom and =scroll-step= makes the window move one line at a time.
#+BEGIN_SRC emacs-lisp
(setq scroll-step 1)
(setq-default scroll-margin 10)
#+end_src

*** Wrapping

Automattically hard-wrap text on 80 chars.
#+begin_src emacs-lisp
(setq-default auto-fill-function 'do-auto-fill)
(setq-default fill-column 80)
#+end_src

** Evil mode
*** Install and activate
#+begin_src emacs-lisp
(use-package evil
  :ensure t)
(evil-mode 1)
#+end_src
*** Vim like window split keys
#+begin_src emacs-lisp
(define-key evil-insert-state-map (kbd "C-w") evil-window-map)
(define-key evil-insert-state-map (kbd "C-w /") 'split-window-right)
(define-key evil-insert-state-map (kbd "C-w -") 'split-window-below)
#+END_SRC

** Helper frameworks
*** Helm

#+begin_src emacs-lisp
(use-package helm
  :ensure t
  :bind (("M-x" . helm-M-x)
         ("C-x C-f" . helm-find-files)
         ("C-x f" . helm-recentf)
         ("C-x b" . helm-buffers-list))
  :preface (require 'helm-config))
#+end_src
*** Which-key

#+begin_src emacs-lisp
;; Popup avec les keybindings disponibles
(use-package which-key
  :ensure t
  :delight
  :init
  (setq which-key-separator " ")
  (setq which-key-prefix-prefix "+")
  :config
  (which-key-mode))
#+end_src

** Org configuration
   
*** Looks
**** Bullets

#+begin_src emacs-lisp
(use-package org-bullets
  :ensure t)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

*** Exporting
#+begin_src emacs-lisp
;;; ============================= ORG MODE ==========================================
(use-package ox-rst
  :ensure t)
(use-package ox-twbs
  :ensure t)
(use-package ox-reveal
  :ensure t
  :config (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js"))
(use-package htmlize
  :ensure t)
#+end_src

*** Organization

**** Todo keywords for GTD

#+begin_src emacs-lisp
(setq org-todo-keywords '((sequence "TODO" "WAITING" "VERIFY" "|" "DONE")
			  (sequence "GTD-IN(i)" "GTD-CLARIFY(c)" "GTD-PROJECT(p)"
				    "GTD-SOMEDAY-MAYBE(s)" "GTD-ACTION(a)" "GTD-NEXT-ACTION(n)"
				    "GTD-WAITING(w)" "|" "GTD-REFERENCE(r)" "GTD-DELEGATED(g)" "GTD-DONE(d)")))
#+end_src

**** Agenda files

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-set-make-code-block-key)
(setq gtd-directory "~/Dropbox/Notes/gtd/")
(setq gtd-in-tray-file (concat gtd-directory "GTD_InTray.org")
      gtd-next-actions-file (concat gtd-directory "GTD_NextActions.org")
      gtd-project-list-file (concat gtd-directory "GTD_ProjectList.org")
      gtd-reference-file (concat gtd-directory "GTD_Reference.org")
      gtd-someday-maybe-file (concat gtd-directory "GTD_SomedayMaybe.org")
      gtd-tickler-file (concat gtd-directory "GTD_Tickler.org")
      gtd-journal-file (concat gtd-directory "GTD_Journal.org"))
(setq org-agenda-files '("~/Dropbox/Notes/gtd/"))
#+end_src

**** Agenda config
     
***** Key

#+begin_src emacs-lisp
(global-set-key (kbd "C-c a") 'org-agenda)
#+end_src

***** Date interval for agenda view

#+begin_src emacs-lisp
(setq org-agenda-span 10
      org-agenda-start-on-weekday nil
      org-agenda-start-day "-3d")
#+end_src

*** Babel
https://orgmode.org/worg/org-contrib/babel/languages/index.html#configure

Activate the packages that you want.  =ob-go= needs to be installed to activate
go language.
#+begin_src emacs-lisp
(use-package ob-go
  :ensure t)
(org-babel-do-load-languages 'org-babel-load-languages
    '((shell . t)
      (python . t)
      (go . t)))
#+end_src

** Magit

#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src

