#+TITLE: Emacs config file
#+OPTIONS: toc:1
#+REVEAL_MIN_SCALE: 0.1
#+REVEAL_HLEVEL: 4
#+PROPERTY: header-args :tangle yes :results none
#+COLUMNS: %40ITEM %header-args[(Header Args)][{Arguments controlling the evaluation of source blocks}] %TAGS
#+OPTIONS: broken-links:mark

[[file:unicorn.jpg]]

Keys sparse tree : Evaluate (org-tags-sparse-tree nil "command|keys") with
=C-x C-e=.  Pressing =C-c C-c= will get out of the sparse tree view
created by the expression.

* Basic
** Documentation
*** Tutorial
The key sequence: =C-h t=
#+ATTR_REVEAL: :frag (appear)
- Very short
- Good selection of things that are immediately useful
- Emacs movement

**** Keys                                                              :keys:
| =C-h k= | =describe-key=         | Describe key                          |
| =C-h f= | =describe-function=    | Get documentation for elisp functions |
| =C-h t= | =tutorial=             | Emacs tutorial                        |
| =C-h o= | =describe-symbol=      | Emacs tutorial                        |
| =C-x 1= | =delete-other-windows= | Maximizes the current window (pane)   |
If there is a symbol or function under the cursor, that will be the default
choice so you can just press =RET=.

** Minimalistic config
*** Intro
    #+REVEAL: split
 An elementary that can be taken as is to start from oriented towards leveragin
 the full power of orgmode immediately.
 #+ATTR_REVEAL: :frag (appear)
 - Sane miscellaneous defaults
 - A built in color theme that looks good in orgmode exports
 - Evil mode if you know vim but not emacs
 - Basic helper frameworks that are defacto standard
 - Elementary org configuration allowing immediate use of built in package babel.

**** This config file

 Emacs loads one file at startup from =~/.emacs=, =~/.emacs.d/init.el=.  The s
*** Package stuff
    :PROPERTIES:
    :HEADER-ARGS: :tangle yes
    :END:

    Standard stuff that is at the start of everyone's config file.
 #+begin_src emacs-lisp
 (require 'package)
 (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
 (add-to-list 'package-archives '("org"   . "http://orgmode.org/elpa/") t)
 (add-to-list 'package-archives '("gnu"   . "http://elpa.gnu.org/packages/") t)
 (package-initialize)
 #+end_src

 Standard way for installing packages.  This replaces the use of =(require
 a-package)= and adds convenience functions.

 #+begin_src emacs-lisp
 (unless (package-installed-p 'use-package)
     (package-refresh-contents)
     (package-install 'use-package))
 (eval-when-compile (require 'use-package))
 #+end_src

*** Scrolling behavior
    :PROPERTIES:
    :HEADER-ARGS: :tangle yes
    :END:

 - =scroll-margin= Distance between cursor and top/bottom before scrolling starts.
 - =scroll-step= makes the window move one line at a time.

 #+BEGIN_SRC emacs-lisp
 (setq scroll-step 1)
 (setq-default scroll-margin 10)
 #+end_src

*** Higlight current line
    :PROPERTIES:
    :HEADER-ARGS: :tangle no
    :END:
Highlight the current line.  This looks really good with the theme =leuven= but
it is kind of annoying in =misterioso=.
#+begin_src emacs-lisp
(global-hl-line-mode 1)
#+end_src
*** Cursor style
    :PROPERTIES:
    :HEADER-ARGS: :tangle yes
    :END:

 This will make our cursor a vertical bar instead of a box.

 If evil mode is active, this will cause our insert-mode cursor to be a bar and
 our normal mode cursor to be a box.

 #+begin_src emacs-lisp
 (setq-default cursor-type '(bar . 3))
 (set-cursor-color "light grey")
 (custom-set-faces '(cursor ((t (:background "SlateGray3")))))
 #+end_src

 I use vi whenever I want to open files in a shell.  Because I use vi, when I see
 the box cursor, I feel like I'm in VI, but when I press keys, it just writes
 text.  So I press ESC, doesn't do anything, ESC again : "ESC ESC is not bound to
 anything".

*** Cursor blink
    :PROPERTIES:
    :HEADER-ARGS: :tangle no
    :END:

 #+begin_src emacs-lisp
 (blink-cursor-mode)
 #+end_src

*** Wrapping
    :PROPERTIES:
    :HEADER-ARGS: :tangle no
    :END:

 Automattically hard-wrap text on 80 chars.

 #+begin_src emacs-lisp
 (setq-default auto-fill-function 'do-auto-fill)
 (setq-default fill-column 80)
 #+end_src

*** Startup color theme
    :PROPERTIES:
    :HEADER-ARGS: :tangle yes
    :END:

 Dark theme that exports well

 #+begin_src emacs-lisp
 (load-theme 'misterioso)
 #+end_src

***** Explanation                                           :noexport_reveal:

     The default emacs theme looks good when exporting to HTML.  But because of
     =htmlize=, with dark themes, the code can come out looking bad in exports
     when text colors meant for dark backgrounds appear over the light background
     of the HTML.

     One of the built-in color themes where code looks good on light backgrounds
     and which is easy on the eyes is =misterioso=

     Although the default emacs theme exports well, it's not easy on the eyes in
     emacs itself.  A light theme that exports well and looks good in emacs is
     =leuven=.

*** Startup font
    :PROPERTIES:
    :HEADER-ARGS: :tangle no
    :END:

 To change the font, as per this [[http://emacs.1067599.n8.nabble.com/Changing-font-size-of-all-the-buffers-including-the-status-line-and-the-characters-shown-in-electricr-tp466906p466932.html][Mailing list post]].

 #+begin_src emacs-lisp
 (custom-set-faces '(default ((t (:height 200)))))
 #+end_src

*** Helper frameworks

**** Undo tree
     :PROPERTIES:
     :HEADER-ARGS: :tangle yes
     :END:
     Use =C-x u= to get an undo tree buffer, really strong!
 #+begin_src emacs-lisp
 (use-package undo-tree
   :ensure t
   :config (global-undo-tree-mode))
 #+end_src
**** Helm
      :PROPERTIES:
      :HEADER-ARGS: :tangle yes
      :END:

 Improve searching interface all over emacs.

 Calling =helm-mode= remaps lots of emacs functions to their =helm=-ized
 equivalents.

 We also add a few ourselves.

 #+begin_src emacs-lisp :results none
 (use-package helm :ensure t
   :config
     (require 'helm-config)
   :bind (("M-x" . helm-M-x)
	  ("C-x C-f" . helm-find-files)
	  ("C-x C-r" . helm-recentf)
	  ("C-h C-i" . helm-info)
	  ("C-x C-b" . helm-buffers-list)
	  ("C-c g" . helm-grep-do-git-grep)))
 #+end_src

 #+begin_src emacs-lisp
 (helm-mode)
 #+end_src
***** Remapped functions

      Notable remapped functions:
 - =M-x= adds helm when writing function
 - Files and buffers
   - =helm-recentf=
   - =helm-find-files=
   - =helm-buffer-list=
 - =helm-mode=
   - =describe-function=
   - =describe-symbol=

***** Powerful tools

 - =helm-grep-do-git-grep=

**** Which-key
     :PROPERTIES:
     :HEADER-ARGS: :tangle yes
     :END:

 Help discovering available key sequences in all contexts.

 Originally developped for spacemacs, now part of the standard emacs packages.

 #+begin_src emacs-lisp
 (use-package which-key
   :ensure t
   :delight
   :init
   (setq which-key-separator " ")
   (setq which-key-prefix-prefix "+")
   (setq which-key-idle-delay 0.01)
   :config
   (which-key-mode))
 #+end_src

**** Standard autocomplete
     :PROPERTIES:
     :HEADER-ARGS: :tangle yes
     :END:

 #+begin_src emacs-lisp
 (use-package company
   :ensure t
   :config (global-company-mode)
	   (setq company-idle-delay 0))
 #+end_src
*** Evil mode

 Evil-mode is a by far the best VI emulation out there.  It is very exact.

 The only thing that is very different is that not all buffers are going to be in
 evil mode.

 At the start, this the most confusing thing in the world.  Once you get used to
 it it's not a big deal.  After a while, you still make mistakes in that sense
 but if you thought you were in evil mode and you pressed the wrong key, you know
 how to fix it.  It becomes like pressing backspace when you make a typo,
 something barely noticed.

**** Install and activate
     :PROPERTIES:
     :HEADER-ARGS: :tangle no
     :END:

 #+begin_src emacs-lisp :results none
   (use-package evil
     :ensure t
     :init (setq evil-want-C-i-jump nil)
	   (setq evil-want-integration t)
	   (setq evil-want-C-u-scroll t)
     :config (evil-mode 1)
	     (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
	     (evil-global-set-key 'motion "j" 'evil-next-visual-line)
	     (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
	     (setq evil-default-state 'emacs)
	     (setq evil-insert-state-modes nil)
	     (setq evil-motion-state-modes nil)
	     (setq evil-normal-state-modes '(fundamental-mode
					     conf-mode
					     prog-mode
					     text-mode
					     dired))
	     (setq evil-insert-state-cursor '((bar . 2) "lime green")
		 evil-normal-state-cursor '(box "yellow"))
	     (add-hook 'with-editor-mode-hook 'evil-insert-state))
 #+end_src

 The =evil-want-C-i-jump= is very important.  When running emacs in the shell,
 the TAB key doesn't work properly.

 Reference : [[https://www.youtube.com/watch?v=xaZMwNELaJY][Emacs From Scratch #3 : Keybindings and Evil]] et la config de Sam.

***** TODO Look into rune/evil-hook

**** Vim like window split keys
     :PROPERTIES:
     :HEADER-ARGS: :tangle no
     :END:

 #+begin_src emacs-lisp
 (define-key evil-insert-state-map (kbd "C-w") evil-window-map)
 (define-key evil-insert-state-map (kbd "C-w /") 'split-window-right)
 (define-key evil-insert-state-map (kbd "C-w -") 'split-window-below)
 #+END_SRC

**** Map undo keys to undo-tree function
     :PROPERTIES:
     :HEADER-ARGS: :tangle no
     :END:

 #+begin_src emacs-lisp
 (define-key evil-normal-state-map (kbd "C-r") 'undo-tree-redo)
 (define-key evil-normal-state-map (kbd "u") 'undo-tree-undo)
 #+end_src

**** Cursor blinking
     :PROPERTIES:
     :HEADER-ARGS: :tangle no
     :END:

  Le curseur flash tout le temps (le comporttement par défaut est de flashe 10
  fois avant d'arrêter).

  #+begin_src emacs-lisp
  (add-hook 'evil-insert-state-exit-hook (lambda () (blink-cursor-mode 0)))
  (add-hook 'evil-insert-state-entry-hook (lambda () (blink-cursor-mode 1)))
  #+end_src

  This sets the amount of cursor blinks before the flashing stop.

  #+begin_src
  (setq blink-cursor-blinks 0)
  #+end_src

  Make sure the cursor starts out not blinking

  #+begin_src emacs-lisp
  (blink-cursor-mode 0)
  #+end_src
*** Help
**** Helper keymap
     :PROPERTIES:
     :HEADER-ARGS: :tangle yes
     :END:

  A keymap of keys to know to get started.  You should get rid of this of this
  section once you are familiar with the keys in order to learn the real bindings
  for the functions given by this keymap.

  #+begin_src emacs-lisp
  (defun about-this-keymap () (interactive)
    (org-open-link-from-string "[[file:~/.emacs.d/config.org::Helper keymap]]"))
  #+end_src

   Also, how meta is it that we have a function whose implementation takes us to
   see its implementation!

  #+begin_src emacs-lisp
    (define-prefix-command 'emacs-movement)
    (global-set-key (kbd "C-| m") 'emacs-movement)
    (global-set-key (kbd "C-| h") 'about-this-keymap)
    (define-key emacs-movement (kbd "C-f") 'forward-char)
    (define-key emacs-movement (kbd "C-b") 'backward-char)
    (define-key emacs-movement (kbd "C-p") 'previous-line)
    (define-key emacs-movement (kbd "C-v") 'scroll-up-command)
    (define-key emacs-movement (kbd "M-v") 'scroll-down-command)
    (define-key emacs-movement (kbd "C-s") 'isearch-forward)
    (define-key emacs-movement (kbd "C-r") 'isearch-backward)
    (define-prefix-command 'C-x)
    (global-set-key (kbd "C-| C-x") 'C-x)
    (define-key C-x (kbd "C-f") 'helm-find-files)
    (define-key C-x (kbd "C-r") 'helm-recentf)
    (define-key C-x (kbd "C-b") 'helm-buffers-list)
    (define-key C-x (kbd "b") 'switch-to-buffer)
    (define-key C-x (kbd "C-s") 'save-buffer)
    (define-key C-x (kbd "C-c") 'save-buffers-kill-emacs)
    (define-key emacs-movement (kbd "C-n") 'next-line)
    (define-prefix-command 'C-h)
    (global-set-key (kbd "C-| C-h") 'C-h)
    (define-key C-h (kbd "C-i") 'helm-info)
    (define-key C-h (kbd "o") 'describe-symbol)
    (define-key C-h (kbd "f") 'describe-function)
    (define-key C-h (kbd "k") 'describe-key)
    (define-prefix-command 'orgmode)
    (global-set-key (kbd "C-| o") 'orgmode)
    (define-key orgmode (kbd "C-c C-,") 'org-insert-structure-template)
    (define-key orgmode (kbd "C-c C-c") 'org-ctrl-c-ctrl-c)
    (define-key orgmode (kbd "C-c '") 'org-edit-special)
    (define-key orgmode (kbd "C-c .") 'org-time-stamp)
    (define-key orgmode (kbd "C-c C-s") 'org-schedule)
    (define-key orgmode (kbd "C-c C-d") 'org-deadline)
    (define-key orgmode (kbd "a") 'org-agenda)
    (define-key orgmode (kbd "v") 'org-tags-view)
    (define-key orgmode (kbd "C-c /") 'org-match-sparse-tree)
    (define-key orgmode (kbd "<M-S-left>") 'org-promote-subtree)
    (define-key orgmode (kbd "<M-S-right>") 'org-demote-subtree)
    (define-key orgmode (kbd "n") 'org-narrow-to-subtree)
    (define-key orgmode (kbd "c") 'org-columns)
  #+end_src

***** Explanations

  La touche =C-|= (=C-S-\=) est une map de touches qui contient des
  fonctionnalité spécialement sélectionnées.

  Le choix de touche de départ est de choisr un binding qui fait chier à faire.

  Le but c'est d'explorer.  Quand on trouve quelque chose qu'on aime, on peut
  découvrir les bindings standards en faisant =C-h f= et écrire le nom de la
  fonction exécutée par la touche.  Ou faire =C-h k= et refaire la touche et
  l'aide nous dira quels sont les autres bindings pour la fonctionnalité.

  Si un binding a le même nom que la fonction comme =C-h=, c'est que ce groupe est
  une sélection des fonctions disponibles en faisant =C-h= normalement.

  Si le groupe contient le mot mode, c'est qu'il contient des fonctions qui sont
  seulement disponibles dans un certain mode.

  Les touches utilisées sont le plus souvent possible la même touche qu'on ferait
  normalement. Par exemple, =C-| o C-c C-,= insère un bloc de code source.  Le
  choix est fait comme ça parce que la touche =C-c C-,= est la touche native pour
  faire cette action.


***** Keys                                                             :keys:
| ~C-|~ | =prefix-key= | A grouping of common basic keys |

**** Help menu
     :PROPERTIES:
     :HEADER-ARGS: :tangle yes
     :END:
       #+begin_src emacs-lisp
      (defun org-agenda-help () (interactive)
	 (org-open-link-from-string "[[file:~/.emacs.d/config.org::*Orgmode implementation of GTD]]"))
      (define-prefix-command 'help-menu)
      (global-set-key (kbd "C-~") 'help-menu)
      (define-key 'help-menu (kbd "a") 'org-agenda-help)
       (easy-menu-define h-menu global-map
	 "Menu for word navigation commands."
	 '("PhilHelp"
	   ["forward-char" forward-char]
	   ["backward-char" forward-char]
	   ["next-line" next-line]
	   ["previous-line" previous-line]
	   ["describe-key" describe-key]
	   ["scroll-up-command" scroll-up-command]
	   ["scroll-down-command" scroll-down-command]
	   ["isearch-forward" isearch-forward]
	   ["isearch-backward" isearch-backward]
	   ["org-time-stamp" org-time-stamp]
	   ["org-promote-subtree" org-promote-subtree]
	   ["org-demote-subtree" org-demote-subtree]
	   ["org-agenda-help" org-agenda-help]))
       #+end_src

    (global-set-key (kbd "C-| m") 'emacs-movement)
    (global-set-key (kbd "C-| h") 'about-this-keymap)
    (define-key emacs-movement (kbd "C-f") 'forward-char)
    (define-key emacs-movement (kbd "C-b") 'backward-char)
    (define-key emacs-movement (kbd "C-p") 'previous-line)

*** Changer l'apparence de contenu caché
    :PROPERTIES:
    :HEADER-ARGS: :tangle yes
    :END:

  #+begin_src emacs-lisp
(set-display-table-slot standard-display-table 
  'selective-display (string-to-vector " ⤵"))
  #+end_src

From [[https://emacs.stackexchange.com/a/10988/19972][Référence]].  You can copy
paste any unicode character in here from a browser

Other options : ▼, ↴, ⬎, ⤵, ⤷, ↯, ⟾, ⋱, ….

*** Follow symlinks
    :PROPERTIES:
    :HEADER-ARGS: :tangle no
    :END:

#+begin_src emacs-lisp
(custom-set-variables '(vc-follow-symlinks nil))
#+end_src

** Basic org configuration
*** Display links as normal text
    :PROPERTIES:
    :HEADER-ARGS: :tangle yes
    :END:

 If you use the hotkeys to work with links the default behavior is OK but if you
 want to just manipulate the text, what orgmode does to hide links is really
 annoying.

 You have to delete a bracket to get the real text to show up.
 [[https://google.com][Google]]

 #+begin_src emacs-lisp
 (setq org-descriptive-links nil)
 ;; Note (org-mode-restart) is required for this to take effect
 #+end_src

**** Org link commands                                              :command:
 | =C-c C-l= | =org-insert-link=         | Insert a link with a menu prompting for URL and description^* |
 |           | =org-store-link=          | Store org link to headline in which the cursor is^*^*         |
 |           | =org-toggle-link-display= | Toggles the way links are displayed                           |

 .^* If the cursor is on a link, this will edit the link.

 .^*^* After doing that, when inserting a link, you can leave the first field
 blank and the link will point to where you stored.
*** Bullets
    :PROPERTIES:
    :HEADER-ARGS: :tangle yes
    :END:

 Show nice bullets

 Essential for easy tree viewing

 #+begin_src emacs-lisp
 (use-package org-bullets
   :ensure t
   :hook (org-mode . org-bullets-mode))
 #+end_src

*** Exporting
    :PROPERTIES:
    :HEADER-ARGS: :tangle yes
    :END:

 - =ox-twbs= to export to beautiful HTML
 - =ox-reveal= to export to Reveal.js presentation
 - =ox-rst= to generate Restructured Text for sphinx documentation
 - =ox-gfm= to generate github flavored markdown
 - =htmlize= for colored code in all export formats

 #+begin_src emacs-lisp
 (use-package ox-gfm :ensure t)
 (use-package ox-rst :ensure t)
 (use-package ox-twbs :ensure t)
 (use-package ox-reveal :ensure t
   :config (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js"))
 (use-package htmlize :ensure t)
 #+end_src

**** Export keys                                                       :keys:

| =C-c C-e= | =org-export-dispatch= | Bring up the export menu |
In the export menu
| =R B= | =org-reveal-export-to-html-and-browse= | Present Right Now      |
| =h o= | =org-html-export-to-html=              | Straight-pipe HTML     |
| =r r= | =org-rst-export-to-rst=                | Restructured text      |
| =w o= | =org-twbs-export-to-html=              | Twitter Bootstrap html |
Except for =R B= the displayed LISP function does not open the file and the
dispatcher opens it after that function has run.
*** Babel
**** Babel Intro                                                       :keys:
 Babel allows running of code blocks.  It is what enables this config to be in
 orgmode format.

 The ability to evaluate code in orgmode source blocks is built in with emacs but
 must be activated to be used:

 https://orgmode.org/worg/org-contrib/babel/languages/index.html#configure
 | =C-c C-c= | =org-babel-execute-src-block= | When cursor is on an SRC block, execute its code |
**** Babel config
     :PROPERTIES:
     :HEADER-ARGS: :tangle yes
     :END:
 We simply add languages that we want to become available.  There are many more
 but some of them require installing extra packages.

 #+begin_src emacs-lisp
 (org-babel-do-load-languages 'org-babel-load-languages
     '((shell . t)
       (python . t)))
 #+end_src

**** Disable prompt
     :PROPERTIES:
     :HEADER-ARGS: :tangle no
     :END:
 As a security precaution this is off by default.  It would indeed be quite
 surprising if your text editor runs a shell command if you accidently do =C-c
 C-c=.

 But if you know it exists, then there is no big deal.  Indeed one is not
 surprised that a command runs when the press enter in a shell.

 #+begin_src emacs-lisp
 (setq org-confirm-babel-evaluate nil)
 #+end_src

**** Disable babel on export
     :PROPERTIES:
     :HEADER-ARGS: :tangle yes
     :END:

When tweaking the document and frequently exporting, it can be useful to not run
every block each time we export.

    #+begin_src emacs-lisp
    (setq org-export-use-babel nil)
    #+end_src

With this setting, code blocks are not evaluated on export but if their output
is there, it will go in the export regardless of this setting.

***** Execute all command                                           :command:

| =C-c C-v C-b= | =org-babel-execute-buffer= | Evaluate all source blocks in the buffer (file) |

*** Present GUI menu
    :PROPERTIES:
    :HEADER-ARGS: :tangle yes
    :END:

   This adds the "Present" menu at the top with menu item "Present Now".

   #+begin_src emacs-lisp :results none
     (defun ox-reveal () (interactive) (org-reveal-export-to-html-and-browse nil t))
     (defun ox-twbs () (interactive) (browse-url (org-twbs-export-to-html nil t)))
     (defun ox-twbs-all () (interactive) (browse-url (org-twbs-export-to-html nil nil)))
     (defun ox-html () (interactive) (browse-url (org-html-export-to-html nil t)))
     (defun ox-html-all () (interactive) (browse-url (org-html-export-to-html nil nil)))
     (defun ox-rst () (interactive) (org-open-file (org-rst-export-to-rst nil t)))
     (defun ox-rst-all () (interactive) (org-open-file (org-rst-export-to-rst nil nil)))
     (easy-menu-define present-menu org-mode-map
       "Menu for word navigation commands."
       '("Present"
	 ["Present Right Now (C-c C-e R B)" org-reveal-export-to-html-and-browse]
	 ["Present Subtree Right Now (C-c C-e C-s R B)" ox-reveal]
	 ["View Twitter Bootstrap HTML Right now (C-c C-e C-s w o)" ox-twbs]
	 ["View Twitter Bootstrap HTML all Right now (C-c C-e w o)" ox-twbs-all]
	 ["View RST Right Now (C-c C-e C-s r R)" ox-rst]
	 ["View RST All Right Now (C-c C-e r R)" ox-rst-all]
	 ["View straight-pipe HTML Right Now (C-c C-e C-s h o)" ox-html]
	 ["View straight-pipe HTML All Right Now (C-c C-e h o)" ox-html-all]))
   #+end_src

** Basic org agenda configuration
*** Agena files
    :PROPERTIES:
    :HEADER-ARGS: :tangle yes
    :END:
 #+begin_src emacs-lisp
 (setq org-agenda-dir "~/Documents/gtd")
 (setq org-agenda-files (list org-agenda-dir))
 #+end_src
*** Agenda Key
    :PROPERTIES:
    :HEADER-ARGS: :tangle no
    :END:
 I mapped a key because I like to pop in and out of it. I don't use it myself
 because the I put =org-agenda= on a keymap for my GTD stuff.

 #+begin_src emacs-lisp
 (global-set-key (kbd "C-c a") 'org-agenda)
 #+end_src

   #+REVEAL: split

*** Refile targets
    :PROPERTIES:
    :HEADER-ARGS: :tangle yes
    :END:
 https://blog.aaronbieber.com/2017/03/19/organizing-notes-with-refile.html
 #+begin_src emacs-lisp
 (setq org-refile-targets '((nil :maxlevel . 3) (org-agenda-files :maxlevel . 3)))
 (setq org-outline-path-complete-in-steps nil)
 (setq org-refile-use-outline-path 'file)
 #+end_src

**** Keys                                                              :keys:
     | =C-c C-w= | =org-refile= | Move headline under cursor to somewhere else |
*** Capture templates
    :PROPERTIES:
    :HEADER-ARGS: :tangle yes
    :END:
 #+begin_src emacs-lisp
 (setq org-capture-templates
   '(("i" "GTD Input" entry (file+headline gtd-in-tray-file "GTD Input Tray")
      "* GTD-IN %?\n %i\n %a" :kill-buffer t)))
 #+end_src
*** Capture hotkey
    :PROPERTIES:
    :HEADER-ARGS: :tangle yes
    :END:
 #+begin_src emacs-lisp
 (defun org-capture-input () (interactive) (org-capture nil "i"))
 (global-set-key (kbd "C-c c") 'org-capture-input)
 #+end_src
**** Keys                                                              :keys:
| =C-c C-w= | =org-capture-input= | (Custom) Org apture with selected template "i". |

* Advanced orgmode and GTD

** Inline images
   :PROPERTIES:
   :HEADER-ARGS: :tangle yes
   :END:

#+begin_src emacs-lisp
(setq org-startup-with-inline-images t)
(setq org-image-actual-width 100)
#+end_src

** GTD
*** Keymap for GTD keybindings
    :PROPERTIES:
    :HEADER-ARGS: :tangle no
    :END:
      We define a keymap that will be accessed with =SPC a g=
 #+begin_src emacs-lisp
   (define-prefix-command 'gtd)
 #+end_src

   #+begin_src emacs-lisp
   ;; (global-set-key (kbd "C-c a g") 'gtd)
   (define-key gtd (kbd "a") 'org-agenda)
   (define-key gtd (kbd "c") 'org-capture)
   #+end_src

*** GTD files
**** Filename symbols
     :PROPERTIES:
     :HEADER-ARGS: :tangle no
     :END:
 #+begin_src emacs-lisp :results none
 (cond
 ((string-equal system-type "windows-nt")
  (progn (setq org-agenda-dir "c:\\Users\\phil1\\Documents\\gtd")))
 ((string-equal system-type "darwin") ;  macOS
  (progn (setq org-agenda-dir "~/Documents/gtd/")))
 ((string-equal system-type "gnu/linux")
  (progn (setq org-agenda-dir "~/Documents/gtd/"))))
 (setq org-agenda-files (list org-agenda-dir))
 (setq gtd-in-tray-file (concat org-agenda-dir "GTD_InTray.org")
     gtd-next-actions-file (concat org-agenda-dir "GTD_NextActions.org")
     gtd-project-list-file (concat org-agenda-dir "GTD_ProjectList.org")
     gtd-reference-file (concat org-agenda-dir "GTD_Reference.org")
     gtd-someday-maybe-file (concat org-agenda-dir "GTD_SomedayMaybe.org")
     gtd-tickler-file (concat org-agenda-dir "GTD_Tickler.org")
     gtd-journal-file (concat org-agenda-dir "GTD_Journal.org"))
 #+end_src
**** Quick access to GTD files
     :PROPERTIES:
     :HEADER-ARGS: :tangle no
     :END:

 We use it to create bindings in the =gtd= map to open files

 #+begin_src emacs-lisp
   (defun gtd-open-in-tray      () (interactive) (find-file gtd-in-tray-file))
   (defun gtd-open-project-list () (interactive) (find-file gtd-project-list-file))
   (defun gtd-open-reference   () (interactive) (find-file gtd-reference-file))
   (defun gtd-open-next-actions () (interactive) (find-file gtd-next-actions-file))
   (define-key gtd (kbd "i") 'gtd-open-in-tray)
   (define-key gtd (kbd "p") 'gtd-open-project-list)
   (define-key gtd (kbd "r") 'gtd-open-reference)
   (define-key gtd (kbd "n") 'gtd-open-next-actions)
 #+end_src

   #+REVEAL: split
*** Todo keywords for GTD
    :PROPERTIES:
    :HEADER-ARGS: :tangle no
    :END:

 The first set of keywords is a generic set of keywords that I can give TODO
 keywords to items without having them be part of my GTD.

 The GTD-* keywords map to the various things that what David Allen calls "stuff"
 can be.

 #+begin_src emacs-lisp
 (setq org-todo-keywords '((sequence "TODO" "WAITING" "VERIFY" "|" "DONE")
			   (sequence
			      "GTD-IN(i)"
			      "GTD-CLARIFY(c)"
			      "GTD-PROJECT(p)"
			      "GTD-SOMEDAY-MAYBE(s)"
			      "GTD-ACTION(a)"
			      "GTD-NEXT-ACTION(n)"
			      "GTD-WAITING(w)"
			      "|"
			      "GTD-REFERENCE(r)"
			      "GTD-DELEGATED(g)"
			      "GTD-DONE(d)")))

 (setq org-todo-keyword-faces
    '(("GTD-IN" :foreground "#ff8800" :weight normal :underline t :size small)
      ("GTD-PROJECT" :foreground "#0088ff" :weight bold :underline t)
      ("GTD-ACTION" :foreground "#0088ff" :weight normal :underline nil)
      ("GTD-NEXT-ACTION" :foreground "#0088ff" :weight bold :underline nil)
      ("GTD-WAITING" :foreground "#aaaa00" :weight normal :underline nil)
      ("GTD-REFERENCE" :foreground "#00ff00" :weight normal :underline nil)
      ("GTD-SOMEDAY-MAYBE" :foreground "#7c7c74" :weight normal :underline nil)
      ("GTD-DONE" :foreground "#00ff00" :weight normal :underline nil)))
 #+end_src

   #+REVEAL: split
*** Definition of stuck projects
    :PROPERTIES:
    :HEADER-ARGS: :tangle no
    :END:

 In GTD projects are called "stuck" if they do not contain a =GTD-NEXT-ACTION=.
 This says that a stuck project is a headline where the todo keyword is
 =GTD-PROJECT= that do not contain a heading matching =GTD-NEXT-ACTION=.

 #+begin_src emacs-lisp
 (setq org-stuck-projects
       '("TODO=\"GTD-PROJECT\"" ;; Search query
	 ("GTD-NEXT-ACTION")    ;; Not stuck if contains
	 ()                     ;; Stuck if contains
	 ""))                   ;; General regex
 #+end_src

*** Date interval for agenda view
    :PROPERTIES:
    :HEADER-ARGS: :tangle no
    :END:

 The default is kind of annoying.  It shows a week starting on a Sunday but what
 is annoying about that is that on Sunday, the agenda won't show what you have
 tomorrow!

 The way this is set, it will show 10 days starting 3 days in the past.

 #+begin_src emacs-lisp :results none
 (setq org-agenda-span 7
       org-agenda-start-on-weekday 0
       org-agenda-start-day "-2d")
 #+end_src

   #+REVEAL: split

*** Agenda display control

Don't show the file and control spacing so that all entries are aligned.

#+begin_src emacs-lisp
  (setq org-agenda-prefix-format  '((agenda . "%-12t% s")))
#+end_src

*** Agenda custom commands
**** Definition
     :PROPERTIES:
     :HEADER-ARGS: :tangle no
     :END:
  #+begin_src emacs-lisp
    (setq org-agenda-custom-commands
	  '(("c" "Complete agenda view"
	     ((tags "PRIORITY=\"A\"")
	      (stuck "")
	      (agenda "" )
	      (todo "GTD-ACTION")))
	    ("s" "Split agenda view"
	     ((agenda "" ((org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled 'deadline))))
	      (agenda "" ((org-agenda-skip-function '(org-agenda-skip-entry-if 'notscheduled))))
	      (agenda "" ((org-agenda-skip-function '(org-agenda-skip-entry-if 'notdeadline))))))
	    ("g" . "GTD keyword searches searches")
	    ("gi" todo "GTD-IN")
	    ("gc" todo "GTD-CLARIFY")
	    ("ga" todo "GTD-ACTION")
	    ("gn" todo-tree "GTD-NEXT-ACTION")
	    ("gp" todo "GTD-PROJECT")))
  #+end_src

 Run the agenda with "c" custom command.

**** Agenda view commands
     :PROPERTIES:
     :HEADER-ARGS: :tangle no
     :END:
 This is equivalent to launching =org-agenda= and pressing a.
  #+begin_src emacs-lisp
  (defun gtd-agenda-view () (interactive)
    (org-agenda nil "a"))
  #+end_src
  #+begin_src emacs-lisp
  (defun gtd-review-view () (interactive)
    (org-agenda nil "c"))
  #+end_src

  #+begin_src emacs-lisp
  (defun gtd-next-action-sparse-tree () (interactive)
    (find-file gtd-project-list-file)
    (org-agenda nil "gn"))
  #+end_src

**** Agenda view hotkeys
     :PROPERTIES:
     :HEADER-ARGS: :tangle yes
     :END:
      Warning: This overrides the binding [[*Agenda Key][Agenda Key]] and makes the key =C-c a= a
      non-prefix key.

 #+begin_src emacs-lisp
 (global-set-key (kbd "C-c a a") 'gtd-agenda-view)
 (global-set-key (kbd "C-c a c") 'gtd-review-view)
 (global-set-key (kbd "C-c a n") 'gtd-next-action-sparse-tree)
 #+end_src

*** Closing notes
    :PROPERTIES:
    :HEADER-ARGS: :tangle no
    :END:
 #+begin_src emacs-lisp :results none
 (setq org-log-done 'note)
 #+end_src
*** Evil mode agenda binding (SPC a g)
    :PROPERTIES:
    :HEADER-ARGS: :tangle no
    :END:
     Only use this if evil mode is activated

     I should put it in the evil mode config but I don't want it to depend on other things
    #+begin_src emacs-lisp
    (define-key evil-normal-state-map (kbd "SPC a g") 'gtd)
    #+end_src


*** Agenda mode map customization
    :PROPERTIES:
    :HEADER-ARGS: :tangle yes
    :END:

 I want to learn Emacs keybindings for most things so I don't want to evilify
 every single mode out there.

 However, doing =j= and =k= is a hard habbit to lose.  So I just remap the keys
 to print a message.
 #+begin_src emacs-lisp
 (add-hook 'org-agenda-mode-hook (lambda ()
 (define-key org-agenda-mode-map (kbd "j") (lambda () (interactive)
   (message "- Lamont Cranston: Do you have any idea who you just kidnapped?
 - Tulku: Cranston; Lamont Cranston.
 - Lamont Cranston: You know my real name?
 - Tulku: Yes. I also know that for as long as you can remember,
	  you struggled against your own black heart and always lost. You
	  watched your sprit, your very face change as the beast claws its
	  way out from within you.
 j is deactivated
 It normally does org-agenda-goto-date")))))
 ;; Originally org-agenda-capture : I use C-c c and I can't use k
 (add-hook 'org-agenda-mode-hook (lambda ()
   (define-key org-agenda-mode-map (kbd "k") (lambda () (interactive)
     (message " The Shadow: I saved your life, Roy Tam. It now belongs to me.
 - Dr. Tam: It does?
 k is deactivated
 It normally does org-agenda-capture (do C-h f to find out what key it is)")))))
 #+end_src

** Remap C-x C-c for deamon usage
   :PROPERTIES:
   :HEADER-ARGS: :tangle no
   :END:
    I use :q to quit
 #+begin_src emacs-lisp
 (global-set-key (kbd "C-x C-c") 'save-buffers-kill-emacs)
 #+end_src

** Center cursor after shift-tab in orgmode
   :PROPERTIES:
   :HEADER-ARGS: :tangle yes
   :END:
 Places the current line in the center of the screen after a =S-TAB= in orgmode.
 #+begin_src emacs-lisp
 (defun org-post-global-cycle () (interactive)
   (recenter)
   (org-beginning-of-line))
 (advice-add 'org-global-cycle
   :after #'org-post-global-cycle)
 #+end_src
 See [[help:advice-add]], basically, we can ask Emacs to add code to be run before
 and/or after an emacs function is run.

 You can use this to remove the "advice".
 #+begin_src emacs-lisp :tangle no
 (advice-remove 'org-global-cycle #'org-post-global-cycle)
 #+end_src

** Sane search and visibility controls
   :PROPERTIES:
   :HEADER-ARGS: :tangle no
   :END:

 [[help:org-show-context-detail]]

 #+begin_src emacs-lisp
 (custom-set-variables
  '(org-show-context-detail
    '((agenda . canonical)
      (bookmark-jump . canonical)
      (isearch . canonical)
      (default . canonical))))
 #+end_src

 They changed the default behavior recently.  There must be a good reason for
 that so I want to try and get used to this new default.

 This is why I want to leave this with tangle no.

** Org roam
   :PROPERTIES:
   :HEADER-ARGS: :tangle no
   :END:

 If orgmode is a note taking tool, [[https://www.orgroam.com][org-roam]] is a knowledge management system.

 Here is the config from the [[https://github.com/org-roam/org-roam][official org-roam GitHub page]].

*WARNING* This will make emacs hang at startup if the directory doesn't exist.
See parent commit, I had an IF to check the directory using =f-directory-p=
which worked when I pressed =C-c C-c= on a source block.  However at startup I
get =Symbol's function definition is void: f-directory-p=.

 #+begin_src emacs-lisp
    (use-package org-roam
    :ensure t
    :hook (after-init . org-roam-mode)
    :custom (org-roam-directory "~/Documents/org-roam/")
    :bind (:map org-roam-mode-map
	    (("C-c n l" . org-roam)
	     ("C-c n f" . org-roam-find-file)
	     ("C-c n g" . org-roam-graph))
	   :map org-mode-map
	    (("C-c n i" . org-roam-insert))
	    (("C-c n I" . org-roam-insert-immediate))))
 #+end_src
*** Discussion

 From what I have seen, it seems that you would want this to be a different
 directory than the agenda dir.

 I plan to try it out but I have some reservations.

 [[https://org-roam.discourse.group/t/integrating-existing-org-files-into-org-roam/1094/4][this post]] shows what I plan to do: have my agenda separate.

 My reservations are about the tree structure of an orgmode document.  It is a
 limitation and a gift.

 In order to be able to navigate your tree you have to organize it in a certain
 way: nodes can't have too many children and other concerns that can make
 navigation easy or hard.

 This isn't a problem in org roam.  Because links aren't restricted to forming
 trees and can form arbitrary graphs.  This makes navigation of our notes super
 easy but it doesn't force us to work as hard to organize them.

 I have seen great benefit in arranging my knowledge in a tree structure that I
 could navigate easily.

 I could have achieved a structure that was more easy to navigate with less
 effort with something like org-roam but the work of creating this very good tree
 structure is something that paid off in other ways.

* Other packages
** Magit
   :PROPERTIES:
   :HEADER-ARGS: :tangle no
   :END:

 The most amazing vim plugin in existence.

 #+begin_src emacs-lisp
 (use-package magit
   :ensure t
   :custom
   (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
   (custom-set-variables '(magit-save-repository-buffers 'dontask))
 #+end_src

 #+RESULTS:

** Yasnippet
   :PROPERTIES:
   :HEADER-ARGS: :tangle no
   :END:
 Note: package =yasnippet= doesn't come with the library of snippets but
 =yasnippet-snippets= comes with them and has =yasnippet= as a dependency
 therefore we only need to install this one.
 #+begin_src emacs-lisp :results none
 (use-package yasnippet-snippets
   :ensure t
   :config (yas-global-mode 1))
 #+end_src

** RSS
   :PROPERTIES:
   :HEADER-ARGS: :tangle no
   :END:

 From [[https://gerlacdt.github.io/posts/emacs-elfeed/][Emacs as an RSS reader]]

 #+begin_src emacs-lisp :results none
 ;; data is stored in ~/.elfeed
 (use-package elfeed :ensure t)
 (setq elfeed-feeds
       '(
	 ;; programming
	 ("https://news.ycombinator.com/rss" hacker)
	 ("https://www.heise.de/developer/rss/news-atom.xml" heise)
	 ("https://www.reddit.com/r/programming.rss" programming)
	 ("https://www.reddit.com/r/emacs.rss" emacs)

	 ;; programming languages
	 ("https://www.reddit.com/r/golang.rss" golang)
	 ("https://www.reddit.com/r/java.rss" java)
	 ("https://www.reddit.com/r/javascript.rss" javascript)
	 ("https://www.reddit.com/r/typescript.rss" typescript)
	 ("https://www.reddit.com/r/clojure.rss" clojure)
	 ("https://www.reddit.com/r/python.rss" python)

	 ;; cloud
	 ("https://www.reddit.com/r/aws.rss" aws)
	 ("https://www.reddit.com/r/googlecloud.rss" googlecloud)
	 ("https://www.reddit.com/r/azure.rss" azure)
	 ("https://www.reddit.com/r/devops.rss" devops)
	 ("https://www.reddit.com/r/kubernetes.rss" kubernetes)
 ))

 (setq-default elfeed-search-filter "@2-days-ago +unread")
 (setq-default elfeed-search-title-max-width 100)
 (setq-default elfeed-search-title-min-width 100)
 #+end_src

* Things to do with orgmode

** Write headlines and collapse them                            :keys:syntax:

| =S-8=   | Insert a star character |
| =TAB=   | =org-cycle=             |
| =S-TAB= | =org-global-cycle=      |

The key =S-TAB= is bound to =org-shifttab= which calls =org-global-cycle= if the
cursor is not in a table.

** Write inline markup                                          :keys:syntax:
| ~=~ | code      |
| ~*~ | bold      |
| ~_~ | Underline |
| ~/~ | Italic    |
| =~= | Verbatim  |
** Write dates like this <2021-03-02> or <2021-03-02 8:00>           :syntax:
** Write source blocks and maybe execute them =C-c C-,=         :keys:syntax:
** Export your stuff to all the formats =C-c C-e=                      :keys:
** Move headlines around with refile =C-c C-w=                         :keys:
** Move headlines around with arrows                                   :keys:
    | M-<left/right> | =org-promote-subtree=, =org-demote-subtree= | Change headline level of subtree (and it's children recursively)            |
    | M-<up/down>    | =org-meta-up=, =org-meta-down=              | With the cursor on a headline, exchange it with it's prececing/next sibling |
** Assign tags to headlines =C-c C-q=                                  :keys:
** Search by tags =M-x org-tags-view=                                  :keys:
** Sparse trees =C-c /=                                                :keys:
** Tags sparse trees =C-c \=                                           :keys:
** Column view                                                         :keys:
Look at the =#+COLUMNS:= property in this document.
|=C-c C-x C-c= | =org-columns= | Switch to a really useful view for consulting and editing properties |
*NOTE* How much of the document will go into column-view depends on where your
 cursor is.  If you want the whole document, then you have to get your cursor to
 the top of the file before pressing =C-c C-x C-c=.
** Agenda view =M-x org-agenda RET=                                 :command:
   If anything has a date in it, it will show up in the agenda on that day.
** Use =SCHEDULED:= and =DEADLINE:= for planning

Using =SCHEDULED:= makes things appear in green in that day in the agenda.

Items marked with =DEADLINE: <2021-02-26 Fri -4d>= appear in red on the day.

Also, with the =-4d=, this defines an interval [26 - 4, 26].

If /today/ falls in the interval, the item will show in the current day in the
agenda.  In that case it will be shown in orange.

*** Date commands                                                      :keys:
| =C-c C-s=    | =org-schedule= | Add the =SCHEDULED:= keyword                            |
| =C-s C-d=    | =org-deadline= | Add the =DEADLINE:= keyword                             |
| =S-<arrows>= | =_=            | Selects the next/previous date in the calendar selector |

I just set the lead time by writing it in manually after having done =C-c C-d=,
using =S-<arrow>= or clicking on the date, press =RET= and go in and insert
=-4d= manually.

** Bulk actions in the agenda                                          :keys:
| =m= | Mark entries for bulk actions |
| =u= | Unmark entries                |
| =U= | Unmark all entries            |
| =*= | Mark all entries current view |
| =B= | Do bulk actions               |
In the bulk actions
| =s=   | Schedule marked items                |
| =d=   | Deadline marked itmes                |
| =+,-= | Add,Remove tags to,from marked items |
| =$=   | Search within marked items           |
I use it to unschedule all the things I had scheduled for today that did not get
done.

Example: Unschedule all marked items: Mark items using =m=, then press =C-u= to
make the following bulk scheduling action unschedule.  Press =B= for the bulk
action menu and press =s= to select =[s]chd= scheduling options.  There will be
no date to enter.  All marked entries will be unscheduled.

This is useful for scheduling things to do the next day.  One should always
unschedule all undone things at the end of the day and not schedule them for the
next day.  Otherwise your schedule will stop being a schedule and become a
single growing todo list.

* Things to do in general
** Evaluate lisp code =C-x C-e=                                        :keys:

* Terminal stuff
** Alt key in terminal emulator settings                           :terminal:
On macos but maybe also on linux, my terminal emulator does something with my
alt key and I have to go into Iterm preferences and change it.

If in the shell you do =M-x= and it doesn't work, look for settings in your
terminal emulator for Alt key behavior.
** Tab key and evil mode
TAB: (setq evil-want-C-i-jump nil).  =C-i= and =TAB= are kind of the same thing
in the shell.  In evil mode, you need to set this to Nil, otherwise, it will do
something with =C-i= that will prevent the =TAB= key from working in orgmode files.
* MacOS stuff

** Preventing a specific only on MacOS and only in terminal emacsclient
https://debbugs.gnu.org/cgi/bugreport.cgi?bug=22993#22
also Note the need to change Alt in terminal emulator profile settings

* Doom themes
  :PROPERTIES:
  :HEADER-ARGS: :tangle no
  :END:

#+begin_src emacs-lisp
(use-package doom-themes
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-one t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
  (doom-themes-treemacs-config)
  
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src

- Ephemeral
- Solarized-dark
- sourcerer
