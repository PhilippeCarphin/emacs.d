#+OPTIONS: toc:1
#+REVEAL_MIN_SCALE: 0.1
#+REVEAL_HLEVEL: 2
#+PROPERTY: hearder-args :tangle yes

* Intro
#+REVEAL: split
An elementary that can be taken as is to start from oriented towards leveragin
the full power of orgmode immediately.
- Sane miscellaneous defaults
- A built in color theme that looks good in orgmode exports
- Evil mode if you know vim but not emacs
- Basic helper frameworks that are defacto standard
- Elementary org configuration allowing immediate use of built in package babel.

** This config file

Emacs loads one file at startup from =~/.emacs=, =~/.emacs.d/init.el=.  The s
* Package stuff

   Standard stuff that is at the start of everyone's config file.
#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
(package-initialize)
#+end_src

Standard way for installing packages.  This replaces the use of =(require
a-package)= and adds convenience functions.

#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
(eval-when-compile (require 'use-package))
#+end_src

* Scrolling behavior

- =scroll-margin= Distance between cursor and top/bottom before scrolling starts.
- =scroll-step= makes the window move one line at a time.

#+BEGIN_SRC emacs-lisp
(setq scroll-step 1)
(setq-default scroll-margin 10)
#+end_src

* Wrapping

Automattically hard-wrap text on 80 chars.

#+begin_src emacs-lisp
(setq-default auto-fill-function 'do-auto-fill)
(setq-default fill-column 80)
#+end_src

* Startup color theme

Dark theme that exports well

#+begin_src emacs-lisp
(load-theme 'misterioso)
#+end_src

*** Explanation                                             :noexport_reveal:

   The default emacs theme looks good when exporting to HTML.  But because of
   =htmlize=, with dark themes, the code can come out looking bad in exports
   when text colors meant for dark backgrounds appear over the light background
   of the HTML.

   One of the built-in color themes where code looks good on light backgrounds
   and which is easy on the eyes is =misterioso=

   Although the default emacs theme exports well, it's not easy on the eyes in
   emacs itself.  A light theme that exports well and looks good in emacs is
   =leuven=.

* Startup font
   
To change the font, as per this [[http://emacs.1067599.n8.nabble.com/Changing-font-size-of-all-the-buffers-including-the-status-line-and-the-characters-shown-in-electricr-tp466906p466932.html][Mailing list post]].

#+begin_src emacs-lisp
(custom-set-faces '(default ((t (:height 200)))))
#+end_src

#+RESULTS:

* Helper frameworks

** Undo tree
    Use =C-x u= to get an undo tree buffer, really strong!
#+begin_src emacs-lisp
(use-package undo-tree
  :ensure t
  :config (global-undo-tree-mode))
#+end_src
** Helm

Improve searching interface all over emacs.

Calling =helm-mode= remaps lots of emacs functions to their =helm=-ized
equivalents.

We also add a few ourselves.

#+begin_src emacs-lisp
(use-package helm :ensure t
  :preface (require 'helm-config)
  :config (helm-mode)
  :bind (("M-x" . helm-M-x)
	 ("C-x C-f" . helm-find-files)
	 ("C-x f" . helm-recentf)
	 ("C-c g" . helm-grep-do-git-grep)
	 ("C-x b" . helm-buffers-list)))
#+end_src

*** Remapped functions

     Notable remapped functions:
- =M-x= adds helm when writing function
- Files and buffers
  - =helm-recentf=
  - =helm-find-files=
  - =helm-buffer-list=
- =helm-mode=
  - =describe-function=
  - =describe-symbol=

*** Powerful tools

- =helm-grep-do-git-grep=

** Which-key

Help discovering available key sequences in all contexts.

Originally developped for spacemacs, now part of the standard emacs packages.

#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :delight
  :init
  (setq which-key-separator " ")
  (setq which-key-prefix-prefix "+")
  (setq which-key-idle-delay 0.01)
  :config
  (which-key-mode))
#+end_src

** Standard autocomplete

#+begin_src emacs-lisp
(use-package company
  :ensure t
  :config (global-company-mode)
          (setq company-idle-delay 0))
#+end_src
* Org configuration
** Looks
*** Bullets

Show nice bullets

Essential for easy tree viewing

#+begin_src emacs-lisp
(use-package org-bullets
  :ensure t
  :hook (org-mode . org-bullets-mode))
#+end_src

** Exporting

- =ox-twbs= to export to beautiful HTML
- =ox-reveal= to export to Reveal.js presentation
- =ox-rst= to generate Restructured Text for sphinx documentation
- =htmlize= for colored code in all export formats

#+begin_src emacs-lisp
(use-package ox-rst :ensure t)
(use-package ox-twbs :ensure t)
(use-package ox-reveal :ensure t
  :config (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js"))
(use-package htmlize :ensure t)
#+end_src

** Babel
*** Babel Intro
Babel allows running of code blocks.  It is what enables this config to be in
orgmode format.

The ability to evaluate code in orgmode source blocks is built in with emacs but
must be activated to be used:

https://orgmode.org/worg/org-contrib/babel/languages/index.html#configure

*** Babel config
We simply add languages that we want to become available.  There are many more
but some of them require installing extra packages.

#+begin_src emacs-lisp
(org-babel-do-load-languages 'org-babel-load-languages
    '((shell . t)
      (python . t)))
#+end_src

*** Disable prompt
As a security precaution this is off by default.  It would indeed be quite
surprising if your text editor runs a shell command if you accidently do =C-c
C-c=.

But if you know it exists, then there is no big deal.  Indeed one is not
surprised that a command runs when the press enter in a shell.

#+begin_src emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+end_src
    
* Evil mode
  :PROPERTIES:
  :header-args: :tangle no
  :END:
** Install and activate

#+begin_src emacs-lisp
(use-package evil
  :ensure t
  :init
  (setq evil-want-C-i-jump nil)
  :config (evil-mode))
#+end_src

The =evil-want-C-i-jump= is very important.  When running emacs in the shell,
the TAB key doesn't work properly.

** Vim like window split keys

#+begin_src emacs-lisp
(define-key evil-insert-state-map (kbd "C-w") evil-window-map)
(define-key evil-insert-state-map (kbd "C-w /") 'split-window-right)
(define-key evil-insert-state-map (kbd "C-w -") 'split-window-below)
#+END_SRC

** Map undo keys to undo-tree function

#+begin_src emacs-lisp
(define-key evil-normal-state-map (kbd "C-r") 'undo-tree-redo)
(define-key evil-normal-state-map (kbd "u") 'undo-tree-undo)
#+end_src

* Extracted code


** Misc stuff
#+begin_src emacs-lisp :tangle no
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
(package-initialize)
(unless (package-installed-p 'use-package) (package-refresh-contents) (package-install 'use-package))
(eval-when-compile (require 'use-package))
(setq scroll-step 1)
(setq-default scroll-margin 10)
(setq-default auto-fill-function 'do-auto-fill)
(setq-default fill-column 80)
(load-theme 'misterioso)
(custom-set-faces '(default ((t (:height 200)))))
#+end_src
** Package configs
#+begin_src emacs-lisp :tangle no
(use-package undo-tree :ensure t :config (global-undo-tree-mode))
(use-package helm :ensure t :preface (require 'helm-config) :config (helm-mode) :bind (("M-x" . helm-M-x) ("C-x C-f" . helm-find-files) ("C-x f" . helm-recentf) ("C-c g" . helm-grep-do-git-grep) ("C-x b" . helm-buffers-list)))
(use-package which-key :ensure t :delight :init (setq which-key-separator " ") (setq which-key-prefix-prefix "+") (setq which-key-idle-delay 0.01) :config (which-key-mode))
(use-package company :ensure t :config (global-company-mode) (setq company-idle-delay 0))
(use-package org-bullets :ensure t :hook (org-mode . org-bullets-mode))
(use-package ox-rst :ensure t)
(use-package ox-twbs :ensure t)
(use-package ox-reveal :ensure t :config (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js"))
(use-package htmlize :ensure t)
(org-babel-do-load-languages 'org-babel-load-languages '((shell . t) (python . t)))
(setq org-confirm-babel-evaluate nil)
#+end_src
